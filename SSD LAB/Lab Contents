Week 1: Lab 1 - Security in the SDLC
•	Integrate security into SDLC phases and document requirements in Jira.
•	Map security considerations to SDLC phases using case studies.

Week 2: Lab 2 - Risk Management 
•	Use IriusRisk to design and analyze a secure login system.
•	Apply secure design principles and generate threat model reports.

Week 3: Lab 3 - Secure Design Principles and Threat Modeling
•	Conduct STRIDE analysis, risk matrix, and mitigation plans using Excel.
•	Compare STRIDE and OCTAVE frameworks and apply NIST standards.

Week 4: Lab 4 - Implementing Security Frameworks
•	Apply COBIT, SABSA, and Zachman frameworks to align goals with controls.
•	Use tools to map SABSA components and implement COBIT controls.

Week 5: Lab 5 - Security Mechanisms and Access Control
•	Develop RBAC, authentication, and authorization mechanisms.
•	Test access control policies using tools like Postman and OpenLDAP.

Week 6: Lab 6 - Identifying and Mitigating Vulnerabilities
•	Simulate attacks (SQL injection, buffer overflow) using Nessus.
•	Document findings, propose mitigations, and discuss real-world impacts.

Week 7: Lab 7 - Implementing Defensive Coding
•	Write secure code, fix vulnerabilities, and follow OWASP guidelines.
•	Use Burp Suite to detect and resolve security issues.

Week 8: Lab 8 - Secure Coding Implementation
•	Develop secure login modules using bcrypt and validate inputs.
•	Identify vulnerabilities with ESLint and CodeQL.

Week 9: Lab 9 - Security Testing Tools
•	Conduct testing with OWASP ZAP and static analysis using SonarQube.
•	Analyze vulnerability reports and log issues in Jira.

Week 10: Lab 10 - Static and Dynamic Analysis
•	Perform static analysis with SonarQube and dynamic testing with OWASP ZAP.
•	Simulate attacks like SQL injection and XSS to fix vulnerabilities.

Week 11: Lab 11 - Implementing Authentication Protocols
•	Design authentication protocols and analyze traffic with Wireshark.
•	Set up Kerberos for mutual authentication and implement password hashing.

Week 12: Lab 12 - Securing APIs
•	Develop secure REST APIs using Flask or Express.js with OAuth2.
•	Test APIs using Postman and secure data with HTTPS.

Week-13: Lab 13. Project/ Open-Ended Lab 
